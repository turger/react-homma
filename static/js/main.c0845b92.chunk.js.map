{"version":3,"sources":["Timetable.js","requests.js","Search.js","App.js","serviceWorker.js","index.js"],"names":["Timetable","toHhMm","milliseconds","departureTime","Date","hours","getUTCHours","minutes","getUTCMinutes","slice","stopsData","this","props","console","log","className","map","stop","key","gtfsId","name","stoptimesWithoutPatterns","stopTime","trip","route","realtimeArrival","mode","shortName","headsign","Component","request","require","getCurrentTimestamp","Math","round","getTime","getStopsData","stopIds","startTime","Promise","resolve","stopIdsString","join","post","url","headers","body","err","httpResponse","error","JSON","parse","getStopsByRadius","lat","lon","data","stopsByRadius","edges","getLocationByName","search","get","qs","text","size","json","features","length","Search","handleChange","e","setState","target","value","handleSubmit","a","preventDefault","state","location","geometry","coordinates","locationText","properties","neighbourhood","region","updateLocation","onSubmit","type","onChange","placeholder","App","stops","node","response","setInterval","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c0845b92.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Timetable.css'\n\nclass Timetable extends Component {\n  toHhMm = (milliseconds) => {\n    const departureTime = new Date(milliseconds * 1000)\n    const hours = departureTime.getUTCHours()\n    const minutes = ('0' + departureTime.getUTCMinutes()).slice(-2)\n    return `${hours}:${minutes}`\n  }\n\n  render() {\n    const { stopsData } = this.props\n    if (!stopsData) return null // to prevent errors while request to HSL api is being made\n    console.log('stopsData',stopsData)\n\n    return (\n      <div className=\"Timetable\">\n        {stopsData.map(stop =>\n          <div className=\"Timetable_stop\" key={stop.gtfsId}>\n            <h2>{stop.name}</h2>\n            <table>\n              <thead>\n                <tr>\n                  <th>Kulkuväline</th>\n                  <th>Lähtöaika</th>\n                </tr>\n              </thead>\n              <tbody>\n                {(stop.stoptimesWithoutPatterns.map(stopTime =>\n                  <tr key={`${stopTime.trip.route.gtfsId}-${stopTime.realtimeArrival}`}>\n                    <td>{stopTime.trip.route.mode} {stopTime.trip.route.shortName} {stopTime.headsign}</td>\n                    <td>{this.toHhMm(stopTime.realtimeArrival)}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\nexport default Timetable\n","const request = require('request')\n\nconst getCurrentTimestamp = () => {\n  return Math.round(new Date().getTime() / 1000)\n}\n\nexport const getStopsData = (stopIds, startTime = getCurrentTimestamp()) => new Promise(resolve => {\n  const stopIdsString = `[${'\"' + stopIds.join('\",\"') + '\"'}]`\n  request.post(\n    {\n      url:'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n      headers: { 'Content-Type': 'application/graphql' },\n      body: `{ stops(ids: ${stopIdsString}) {\n                name\n                gtfsId\n                stoptimesWithoutPatterns(\n                  startTime: \"${startTime}\",\n                  timeRange: 180000,\n                  numberOfDepartures:10\n                ) {\n                  realtimeArrival\n                \theadsign\n                  trip {\n                    route {\n                      gtfsId\n                      longName\n                      shortName\n                      mode\n                    }\n                  }\n                }\n              }\n            }`\n    },\n    function optionalCallback(err, httpResponse, body) {\n      if (err) {\n        return console.error('Stops data upload failed:', err);\n      }\n      resolve(JSON.parse(body))\n    }\n  )\n})\n\nexport const getStopsByRadius = (lat, lon) => new Promise(resolve => {\n  request.post(\n    {\n      url:'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql',\n      headers: { 'Content-Type': 'application/graphql' },\n      body: `{ stopsByRadius(lat:${lat}, lon:${lon}, radius:1000, last: 5) {\n                edges {\n                  node {\n                    distance\n                    stop {\n                      gtfsId\n                      name\n                    }\n                  }\n                }\n              }\n            }`\n    },\n    function optionalCallback(err, httpResponse, body) {\n      if (err) {\n        return console.error('Stops data upload failed:', err);\n      }\n      resolve(JSON.parse(body).data.stopsByRadius.edges)\n    }\n  )\n})\n\nexport const getLocationByName = (search) => new Promise(resolve => {\n  request.get({\n    url: 'https://api.digitransit.fi/geocoding/v1/search',\n    qs: {\n      text: search,\n      size: '1',\n      'focus.point.lat': 60.171578,\n      'focus.point.lon': 24.940529\n    },\n    json: true\n  },\n    function optionalCallback(err, httpResponse, body) {\n      if (err) {\n        return console.error('Location data upload failed:', err);\n      }\n      resolve(body.features.length > 0 ? body.features[0] : null)\n    }\n  )\n})\n","import React, { Component } from 'react'\nimport {getLocationByName} from './requests'\nimport './Search.css'\n\nclass Search extends Component {\n  constructor() {\n    super()\n    this.state = {search: '', location: ''}\n  }\n\n  handleChange = (e) => {\n    this.setState({search: e.target.value})\n  }\n\n  handleSubmit = async (e) => {\n    e.preventDefault()\n    if (!this.state.search) return null\n    const location = await getLocationByName(this.state.search)\n    const lat = location.geometry.coordinates[1]\n    const lon = location.geometry.coordinates[0]\n    const locationText = `${location.properties.name}, ${location.properties.neighbourhood || location.properties.region}`\n    this.setState({location: locationText})\n    this.props.updateLocation(lat, lon)\n  }\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <form onSubmit={this.handleSubmit}>\n          <input className=\"Search_input\" type=\"text\" name=\"location\" value={this.state.search} onChange={this.handleChange} placeholder=\"Sijainti\" />\n          <input className=\"Search_button\" type=\"submit\" value=\"Hae\" />\n        </form>\n        <p>{this.state.location}</p>\n      </div>\n    )\n  }\n}\n\nexport default Search\n","import React, {Component} from 'react'\nimport Timetable from './Timetable'\nimport Search from './Search'\nimport './App.css'\nimport {getStopsData, getStopsByRadius} from './requests'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      stopsData: [],\n      lat: null,\n      lon: null\n    }\n  }\n\n  async componentDidMount() {\n    await this.getStopsData()\n    setInterval(async () => {\n      await this.getStopsData()\n    } , 60000)\n  }\n\n  updateLocation = async (lat, lon) => {\n    this.setState({lat, lon}, this.getStopsData)\n  }\n\n  getStopsData = async () => {\n    const {lat, lon} = this.state\n    if (lat && lon) {\n      const stops = await getStopsByRadius(lat, lon)\n      const stopIds = stops.map(stop => stop.node.stop.gtfsId)\n      const response = await getStopsData(stopIds)\n      this.setState({stopsData: response.data.stops})\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Aikataulu</h1>\n        <Search updateLocation={this.updateLocation}/>\n        <Timetable stopsData={this.state.stopsData}/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}